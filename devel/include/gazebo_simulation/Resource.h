// Generated by gencpp from file gazebo_simulation/Resource.msg
// DO NOT EDIT!


#ifndef GAZEBO_SIMULATION_MESSAGE_RESOURCE_H
#define GAZEBO_SIMULATION_MESSAGE_RESOURCE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace gazebo_simulation
{
template <class ContainerAllocator>
struct Resource_
{
  typedef Resource_<ContainerAllocator> Type;

  Resource_()
    : resource()
    , impact(0.0)  {
    }
  Resource_(const ContainerAllocator& _alloc)
    : resource(_alloc)
    , impact(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _resource_type;
  _resource_type resource;

   typedef float _impact_type;
  _impact_type impact;





  typedef boost::shared_ptr< ::gazebo_simulation::Resource_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gazebo_simulation::Resource_<ContainerAllocator> const> ConstPtr;

}; // struct Resource_

typedef ::gazebo_simulation::Resource_<std::allocator<void> > Resource;

typedef boost::shared_ptr< ::gazebo_simulation::Resource > ResourcePtr;
typedef boost::shared_ptr< ::gazebo_simulation::Resource const> ResourceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gazebo_simulation::Resource_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gazebo_simulation::Resource_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gazebo_simulation::Resource_<ContainerAllocator1> & lhs, const ::gazebo_simulation::Resource_<ContainerAllocator2> & rhs)
{
  return lhs.resource == rhs.resource &&
    lhs.impact == rhs.impact;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gazebo_simulation::Resource_<ContainerAllocator1> & lhs, const ::gazebo_simulation::Resource_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gazebo_simulation

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::gazebo_simulation::Resource_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gazebo_simulation::Resource_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gazebo_simulation::Resource_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gazebo_simulation::Resource_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gazebo_simulation::Resource_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gazebo_simulation::Resource_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gazebo_simulation::Resource_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cd332bcd4b1e896fa9f27f8efb55a8f7";
  }

  static const char* value(const ::gazebo_simulation::Resource_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcd332bcd4b1e896fULL;
  static const uint64_t static_value2 = 0xa9f27f8efb55a8f7ULL;
};

template<class ContainerAllocator>
struct DataType< ::gazebo_simulation::Resource_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gazebo_simulation/Resource";
  }

  static const char* value(const ::gazebo_simulation::Resource_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gazebo_simulation::Resource_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string resource\n"
"float32 impact\n"
;
  }

  static const char* value(const ::gazebo_simulation::Resource_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gazebo_simulation::Resource_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.resource);
      stream.next(m.impact);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Resource_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gazebo_simulation::Resource_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gazebo_simulation::Resource_<ContainerAllocator>& v)
  {
    s << indent << "resource: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.resource);
    s << indent << "impact: ";
    Printer<float>::stream(s, indent + "  ", v.impact);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GAZEBO_SIMULATION_MESSAGE_RESOURCE_H
