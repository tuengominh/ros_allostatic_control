// Generated by gencpp from file allostasis_msg/resource.msg
// DO NOT EDIT!


#ifndef ALLOSTASIS_MSG_MESSAGE_RESOURCE_H
#define ALLOSTASIS_MSG_MESSAGE_RESOURCE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace allostasis_msg
{
template <class ContainerAllocator>
struct resource_
{
  typedef resource_<ContainerAllocator> Type;

  resource_()
    : system()
    , resource()
    , impact(0.0)  {
    }
  resource_(const ContainerAllocator& _alloc)
    : system(_alloc)
    , resource(_alloc)
    , impact(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _system_type;
  _system_type system;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _resource_type;
  _resource_type resource;

   typedef float _impact_type;
  _impact_type impact;





  typedef boost::shared_ptr< ::allostasis_msg::resource_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::allostasis_msg::resource_<ContainerAllocator> const> ConstPtr;

}; // struct resource_

typedef ::allostasis_msg::resource_<std::allocator<void> > resource;

typedef boost::shared_ptr< ::allostasis_msg::resource > resourcePtr;
typedef boost::shared_ptr< ::allostasis_msg::resource const> resourceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::allostasis_msg::resource_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::allostasis_msg::resource_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::allostasis_msg::resource_<ContainerAllocator1> & lhs, const ::allostasis_msg::resource_<ContainerAllocator2> & rhs)
{
  return lhs.system == rhs.system &&
    lhs.resource == rhs.resource &&
    lhs.impact == rhs.impact;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::allostasis_msg::resource_<ContainerAllocator1> & lhs, const ::allostasis_msg::resource_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace allostasis_msg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::allostasis_msg::resource_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::allostasis_msg::resource_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::allostasis_msg::resource_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::allostasis_msg::resource_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::allostasis_msg::resource_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::allostasis_msg::resource_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::allostasis_msg::resource_<ContainerAllocator> >
{
  static const char* value()
  {
    return "10b0369c5f5bdb9cf04116e86ec64e3b";
  }

  static const char* value(const ::allostasis_msg::resource_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x10b0369c5f5bdb9cULL;
  static const uint64_t static_value2 = 0xf04116e86ec64e3bULL;
};

template<class ContainerAllocator>
struct DataType< ::allostasis_msg::resource_<ContainerAllocator> >
{
  static const char* value()
  {
    return "allostasis_msg/resource";
  }

  static const char* value(const ::allostasis_msg::resource_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::allostasis_msg::resource_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string system\n"
"string resource\n"
"float32 impact\n"
;
  }

  static const char* value(const ::allostasis_msg::resource_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::allostasis_msg::resource_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.system);
      stream.next(m.resource);
      stream.next(m.impact);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct resource_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::allostasis_msg::resource_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::allostasis_msg::resource_<ContainerAllocator>& v)
  {
    s << indent << "system: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.system);
    s << indent << "resource: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.resource);
    s << indent << "impact: ";
    Printer<float>::stream(s, indent + "  ", v.impact);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ALLOSTASIS_MSG_MESSAGE_RESOURCE_H
